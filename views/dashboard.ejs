<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <title>Dashboard de Visitas - MS</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <style>
    html, body { margin:0; padding:0; height:100%; }
    .container { display:flex; height:100%; width:100%; }
    .sidebar {
      width:25%; padding:20px; box-sizing:border-box;
      background:#fafafa; overflow-y:auto;
    }
    .metrics { display:flex; flex-direction:column; gap:10px; margin-bottom:20px; }
    .card { background:white; padding:10px; border-radius:6px; box-shadow:0 1px 3px rgba(0,0,0,0.1); }
    .card h3 { margin:0 0 5px; font-size:14px; }
    .card p { margin:0; font-size:16px; font-weight:bold; }
    h2 { margin-bottom:8px; }
    ol#ranking { list-style: decimal inside; padding-left:0; margin-bottom:20px; }
    ol#ranking li { margin-bottom:6px; font-size:14px; }
    .legend { margin-top:10px; }
    .legend-item { display:flex; align-items:center; gap:4px; font-size:12px; margin-bottom:4px; }
    .legend-box { width:16px; height:16px; border:1px solid #ccc; }
    #map-container { width:75%; position:relative; }
    #map { width:100%; height:100%; background:#fff; }
    .region-label { font-size:14px; font-weight:bold; fill:#333; pointer-events:none; text-anchor:middle; }
    text.city-label { font-size:10px; fill:#000; pointer-events:none; text-anchor:middle; }
  </style>
</head>
<body>
  <div class="container">
    <div class="sidebar">
      <div class="metrics">
        <div class="card"><h3>Município Mais Visitado</h3><p id="card-top-city">...</p></div>
        <div class="card"><h3>Município Menos Visitado</h3><p id="card-least-city">...</p></div>
        <div class="card"><h3>Mesorregião Mais Visitada</h3><p id="card-top-region">...</p></div>
      </div>
      <h2>Ranking por Região</h2>
      <ol id="ranking"></ol>
      <h2>Legenda de Visitas</h2>
      <div class="legend" id="legend"></div>
    </div>
    <div id="map-container">
      <svg id="map"></svg>
    </div>
  </div>

  <script>
    // Dados injetados pelo controller
    const visitsCity = <%- JSON.stringify(visitsCity) %>;
    const visitsRegion = <%- JSON.stringify(visitsRegion) %>;

    // Normalização de strings (acentos, maiúsculas, trim)
    const normalize = s => s.normalize('NFD').replace(/\p{Diacritic}/gu, '').toUpperCase().trim();

    // Mapa visitas por cidade
    const visitsMap = new Map(visitsCity.map(v => [normalize(v.city), v.count]));

    // Listas ordenadas de cidades
    const cityList = visitsCity.map(v => ({ city: v.city, count: v.count }));
    const sortedCities = cityList.slice().sort((a, b) => b.count - a.count);
    const topCity = sortedCities[0] || { city: '-', count: 0 };
    const leastCity = sortedCities[sortedCities.length - 1] || { city: '-', count: 0 };

    document.getElementById('card-top-city').textContent = `${topCity.city} (${topCity.count})`;
    document.getElementById('card-least-city').textContent = `${leastCity.city} (${leastCity.count})`;

    // Totais por região
    const regionTotals = visitsRegion.map(r => ({ region: r.region, count: r.count, last: r.last_visit }));
    const sortedRegions = regionTotals.slice().sort((a, b) => b.count - a.count);
    document.getElementById('card-top-region').textContent = `${sortedRegions[0].region} (${sortedRegions[0].count})`;

    // Ranking por região
    const ol = d3.select('#ranking');
    sortedRegions.forEach(r => ol.append('li').text(`${r.region}: ${r.count} visitas`));

    // Escala de cor pelas visitas de cada município
    const maxCity = d3.max(visitsCity, d => d.count) || 1;
    const colorScale = d3.scaleSequential(d3.interpolateOrRd).domain([0, maxCity]);

    // Legenda de cores
    const legend = d3.select('#legend');
    [0, Math.round(maxCity / 2), maxCity].forEach(val => {
      legend.append('div').attr('class', 'legend-item').html(
        `<span class="legend-box" style="background:${colorScale(val)}"></span><span>${val} visitas</span>`
      );
    });

    // Função de resize do SVG
    function resize() {
      const c = document.getElementById('map-container');
      d3.select('#map')
        .attr('width', c.clientWidth)
        .attr('height', c.clientHeight);
    }
    window.addEventListener('resize', resize);
    resize();

    // Desenha o mapa
    d3.json('/ms_municipios.geojson').then(muniGeo => {
      const width = document.getElementById('map-container').clientWidth;
      const height = document.getElementById('map-container').clientHeight;
      const projection = d3.geoMercator().fitSize([width, height], muniGeo);
      const path = d3.geoPath().projection(projection);
      const svg = d3.select('#map');

      // Municípios coloridos por visitas
      svg.selectAll('path')
        .data(muniGeo.features)
        .join('path')
          .attr('d', path)
          .attr('fill', d => {
            const key = normalize(d.properties.name);
            return colorScale(visitsMap.get(key) || 0);
          })
          .attr('stroke', '#333')
          .attr('stroke-width', 0.5)
        .append('title')
          .text(d => `${d.properties.name}: ${visitsMap.get(normalize(d.properties.name)) || 0} visitas`);

      // Labels das 5 cidades mais visitadas
      sortedCities.slice(0, 5).forEach(c => {
        const feat = muniGeo.features.find(f => normalize(f.properties.name) === normalize(c.city));
        if (feat) {
          const [x, y] = path.centroid(feat);
          svg.append('text')
            .attr('class', 'city-label')
            .attr('x', x)
            .attr('y', y)
            .text(c.count);
        }
      });

      // Contornos das mesorregiões
      d3.json('/ms_municipios.geojson').then(mesoGeo => {
        svg.append('g').selectAll('path')
          .data(mesoGeo.features)
          .join('path')
            .attr('d', path)
            .attr('fill', 'none')
            .attr('stroke', '#000')
            .attr('stroke-width', 1.5);
      });
    });
  </script>
</body>
</html>
